// Select input fields and play button
const hoursInput = document.getElementById('hours');
const minutesInput = document.getElementById('minutes');
const secondsInput = document.getElementById('seconds');
const playButton = document.getElementById('play-button');
const contentWrapper = document.querySelector('.content-wrapper');

// Variables to hold timer values and interval
let totalTimeInSeconds = 0;
let countdownInterval;

// Function to start the countdown timer
function startTimer() {
    // Get values from input fields and convert to seconds
    const hours = parseInt(hoursInput.value) || 0;
    const minutes = parseInt(minutesInput.value) || 0;
    const seconds = parseInt(secondsInput.value) || 0;

    // Calculate total time in seconds
    totalTimeInSeconds = (hours * 3600) + (minutes * 60) + seconds;

    // If total time is 0, prevent starting the timer
    if (totalTimeInSeconds <= 0) {
        alert("Please enter a valid time.");
        return;
    }

    // Disable inputs and button to prevent further changes
    disableInputs();

    // Start countdown
    countdownInterval = setInterval(updateTimer, 1000);
}

// Function to update the timer every second
function updateTimer() {
    if (totalTimeInSeconds <= 0) {
        clearInterval(countdownInterval);
        alert("Time's up!");

        // Add bouncing and blinking border effect
        contentWrapper.classList.add('timer-done');

        // Keep the play button hidden when timer hits zero
        playButton.classList.add('hide');

        // Enable inputs after timer ends
        enableInputs();
        return;
    }

    totalTimeInSeconds--;

    // Calculate hours, minutes, and seconds
    const hours = Math.floor(totalTimeInSeconds / 3600);
    const minutes = Math.floor((totalTimeInSeconds % 3600) / 60);
    const seconds = totalTimeInSeconds % 60;

    // Update input fields
    hoursInput.value = String(hours).padStart(2, '0');
    minutesInput.value = String(minutes).padStart(2, '0');
    secondsInput.value = String(seconds).padStart(2, '0');
}

// Function to disable inputs and button
function disableInputs() {
    hoursInput.disabled = true;
    minutesInput.disabled = true;
    secondsInput.disabled = true;
    playButton.classList.add('hide'); // Hide play button
}

// Function to enable inputs and button
function enableInputs() {
    hoursInput.disabled = false;
    minutesInput.disabled = false;
    secondsInput.disabled = false;
}

// Function to check if any input field has a value
function checkInput() {
    const hours = hoursInput.value;
    const minutes = minutesInput.value;
    const seconds = secondsInput.value;

    // If new input is made, stop the bounce and show the play button
    if (hours || minutes || seconds) {
        contentWrapper.classList.remove('timer-done'); // Stop the bouncing
        playButton.classList.remove('hide'); // Show play button
    } else {
        playButton.classList.add('hide');
    }
}

// Stop bouncing when clicking on input fields
function stopBounce() {
    contentWrapper.classList.remove('timer-done'); // Removes bounce animation class
}

// Event listeners for input fields
hoursInput.addEventListener('input', checkInput);
minutesInput.addEventListener('input', checkInput);
secondsInput.addEventListener('input', checkInput);

// Stop bouncing animation when input fields are clicked
hoursInput.addEventListener('click', stopBounce);
minutesInput.addEventListener('click', stopBounce);
secondsInput.addEventListener('click', stopBounce);

// Event listener for the play button
playButton.addEventListener('click', startTimer);







@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600&display=swap');


body {
    font-family: "Nunito", 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: white;
}


header {
    position: fixed;
    top: 0;
    width: 100%;
    background-color: white;
    color: black;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

a {
    text-decoration: none;
    color: black;
}

.content-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 60px;
    border: 1px solid black;
    width: 70%;
    height: 30%;
    border-radius: 5px;
}

.timer {
    font-size: 40px;
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
    gap: 2rem;
}

.time-section {
    width: 70px;
    font-size: 40px;
    text-align: center;
    border: none;
    background: none;
    color: black;
    font-family: inherit;
}

.time-section:focus {
    border: 1px solid black;
    outline: none; 
}

.time-section::placeholder {
    color: black;
}


/* input[type="number"] {
    -moz-appearance: textfield;
} */

input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none; /* Chrome and Safari */
    margin: 0; /* Remove margin */
}

button {
    width: 80px;
    height: 80px;
    border-radius: 50%; /* Makes the button circular */
    background-color: black;
    color: white;
    border: none;
    font-size: 24px;
    display: block;
    margin: 20px auto 0 auto; /* Center the button below the timer */
    cursor: pointer;
    transition: background-color 0.3s;
}
  
button:hover {
    background-color: #333; /* Slightly lighter black on hover */
}
  
button.hide {
    display: none;
}

footer {
    position: absolute;
    bottom: 10px;
    text-align: center;
    font-size: 18px;
    color: black;
}




/* Add border-blink effect with the bounce */
@keyframes bounce {
    0%, 100% {
        transform: translateY(0);
        border-color: white; /* Border disappears at the start and end */
    }
    50% {
        transform: translateY(-20px);
        border-color: red; /* Border turns red at the middle of the bounce */
    }
}

/* Update the .timer-done class to apply the bouncing and blinking effect */
.timer-done {
    animation: bounce 1s ease infinite;
    border-width: 4px;
    border-style: solid;
    border-color: 5px solid red; /* Initial border color */
}



/* Mobile responsiveness */
@media (max-width: 768px) {
    .content-wrapper {
        width: 60%; /* Adjust the width to take most of the screen */
        height: auto;
        padding: 20px;
    }

    .time-section {
        width: 50px; /* Adjust the size of the time input fields */
        font-size: 30px; /* Reduce font size for smaller screens */
    }

    button {
        width: 60px; /* Adjust the play button size */
        height: 60px;
        font-size: 20px;
    }

    footer {
        font-size: 14px;
    }
}

/* Tablet responsiveness */
@media (min-width: 769px) and (max-width: 1024px) {
    .content-wrapper {
        width: 80%;
        height: auto;
    }

    .time-section {
        width: 60px;
        font-size: 35px;
    }

    button {
        width: 70px;
        height: 70px;
        font-size: 22px;
    }

    footer {
        font-size: 16px;
    }
}
